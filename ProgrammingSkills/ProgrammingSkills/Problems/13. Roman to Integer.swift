//
//  13. Roman to Integer.swift
//  ProgrammingSkills
//
//  Created by Anna Boldyreva on 21.03.2024.
//

/*
 Римские цифры представлены семью различными символами: I, V, X, L, C, D и M.

 Значение символов
 I 1
 V 5
 X 10
 L 50
 C 100
 D 500
 M 1000
 
 Например, 2 записывается как II в римской нумерации, просто две единицы, сложенные вместе. Число 12 записывается как XII, то есть просто X + II.
 Число 27 записывается как XXVII, то есть XX + V + II.

 Римские цифры обычно пишутся слева направо от наибольшей к наименьшей. Однако цифра, обозначающая четыре, не является IIII. Вместо этого число
 четыре записывается как IV. Поскольку единица находится перед пятеркой, мы вычитаем ее, получая четыре. Тот же принцип применим к числу девять,
 которое записывается как IX. Есть шесть случаев, когда используется вычитание:

 I можно поставить перед V (5) и X (10), чтобы получить 4 и 9.
 X можно поставить перед L (50) и C (100), чтобы получить 40 и 90.
 C можно поставить перед D (500) и M (1000), чтобы получить 400 и 900.
 Задав римскую цифру, преобразуйте ее в целое число.

 Пример 1:

 Вход: s = "III"
 Выход: 3
 Пояснение: III = 3.

 Пример 2:

 Вход: s = "LVIII"
 Выход: 58
 Пояснение: L = 50, V = 5, III = 3.

 Пример 3:

 Вход: s = "MCMXCIV"
 Выходные данные: 1994
 Пояснения: M = 1000, CM = 900, XC = 90 и IV = 4.
 */

class RomanToIntClass {
    func romanToInt(_ s: String) -> Int {
        // 1. Создадим словарь romanValues, который хранит соответствия римских чисел их числовыми значениями. Ключами в словаре являются символы, а значениями - числа
        let romanValues: [Character: Int] = [
            "I": 1,
            "V": 5,
            "X": 10,
            "L": 50,
            "C": 100,
            "D": 500,
            "M": 1000
        ]

        // Создадим переменную total, которая будет использоваться для хранения общего числового значения римской цифры
        var total = 0

        // Создадим переменную previousValue, которая будет использоваться для хранения значения предыдущего символа римской цифры, 
        // чтобы определить, нужно ли прибавлять или вычитать текущее значение
        var previousValue = 0

        // Пробегаемся по символам начальной строки с конца
        for char in s.reversed() {

            // Проверяем есть ли текущий символ в словаре romanValues
            if let value = romanValues[char] {
                // Если текущее значение больше, либо равно previousValue, то мы к конечному результату прибавляем value
                if value >= previousValue {
                    total += value

                // Иначе от конечного результата отнимаем value
                } else {
                    total -= value
                }

                // Значение value присваивается переменной previousValue, чтобы запомнить его для следующей итерации цикла.
                previousValue = value
            }
        }

        return total
    }
}
