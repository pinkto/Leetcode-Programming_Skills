//
//  66. Plus One.swift
//  ProgrammingSkills
//
//  Created by Anna Boldyreva on 11.03.2024.
//

/*
 Дано большое целое число, представленное в виде целочисленного массива digits, где каждая digits[i] - это i-я цифра целого числа. 
 Цифры упорядочены от наибольшего значения к наименьшему в порядке слева направо. Большое целое число не содержит никаких 0.

 Увеличьте большое целое число на единицу и верните полученный массив цифр.

 Пример 1:
 Вход: digits = [1,2,3]
 Выход: [1,2,4]
 Пояснения: Массив представляет целое число 123.
 Увеличение на единицу дает 123 + 1 = 124.
 Таким образом, результатом должно быть [1,2,4].
 
 Пример 2:
 Вход: digits = [4,3,2,1]
 Выход: [4,3,2,2]
 Пояснения: Массив представляет целое число 4321.
 Увеличение на единицу дает 4321 + 1 = 4322.
 Таким образом, результатом должно быть [4,3,2,2].
 
 Пример 3:
 Вход: digits = [9]
 Выход: [1,0]
 Пояснения: Массив представляет целое число 9.
 Увеличение на единицу дает 9 + 1 = 10.
 Таким образом, результатом должно быть [1,0].
 */

class PlusOneClass {
    func plusOne(_ digits: [Int]) -> [Int] {

        // Создадим переменную, которую будем добавять к наименьшему значащему разряду
        var offset = 1

        // Создаем массив result, в который помещаем копию входного массива digits
        var result = digits

        // Начинаем идти по массиву в обратном порядке,
        // начиная с наименьшего значащего разряда (последний элемент массива) и заканчивая старшим значащим разрядом (первый элемент массива)
        for i in stride(from: digits.count - 1, through: 0, by: -1) {

            // Добалвяем offset к текущей цифре result
            result[i] += offset
            // Затем он обновляем offset, деля result[i] на 10.
            // Если после сложения цифра превышает 9, offset становится 1, что означает перенос на следующий старший разряд. В противном случае offset остается равным 0.
            offset = result[i] / 10
            // Обновляем текущее значение i-го элемента взяв от него остаток от деления на 10. Эта операция гарантирует, что текущая цифра остается в диапазоне от 0 до 9.
            result[i] %= 10
        }

        // Если смещение по-прежнему ненулевое, это означает, что есть перенос на старшую цифру. В этом случае offset вставляется на нулевой индекс result
        if offset > 0 {
            result.insert(offset, at: 0)
        }

        return result
    }
}
